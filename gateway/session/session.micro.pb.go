// Code generated by protoc-gen-micro. DO NOT EDIT.

package session

import (
  "context"
  "github.com/ofavor/micro-lite/server"
  "github.com/ofavor/micro-lite/client"
)

type SessionService interface {
  Send(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
  Broadcast(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type sessionService struct {
  serviceName string
  c client.Client
}

func NewSessionService(name string, c client.Client) SessionService {
  return &sessionService {
    serviceName: name,
    c: c,
  }
}

func (s *sessionService)Send(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
  req := client.NewRequest(s.serviceName, "Session.Send", in)
  rsp := new(Response)
  err := s.c.Call(ctx, req, rsp, opts...)
  if err != nil {
    return nil, err
  }
  return rsp, nil
}

func (s *sessionService)Broadcast(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
  req := client.NewRequest(s.serviceName, "Session.Broadcast", in)
  rsp := new(Response)
  err := s.c.Call(ctx, req, rsp, opts...)
  if err != nil {
    return nil, err
  }
  return rsp, nil
}

type SessionHandler interface {
  Send(ctx context.Context, in *Request, out *Response) error
  Broadcast(ctx context.Context, in *Request, out *Response) error
}

func RegisterSessionHandler(s server.Server, h SessionHandler) {
  hdr := server.NewHandler("Session", h)
  s.Handle(hdr)
}

