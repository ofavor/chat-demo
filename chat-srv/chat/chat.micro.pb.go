// Code generated by protoc-gen-micro. DO NOT EDIT.

package chat

import (
  "context"
  "github.com/ofavor/micro-lite/server"
  "github.com/ofavor/micro-lite/client"
)

type ChatService interface {
  Command(ctx context.Context, in *CommandRequest, opts ...client.CallOption) (*CommandResponse, error)
}

type chatService struct {
  serviceName string
  c client.Client
}

func NewChatService(name string, c client.Client) ChatService {
  return &chatService {
    serviceName: name,
    c: c,
  }
}

func (s *chatService)Command(ctx context.Context, in *CommandRequest, opts ...client.CallOption) (*CommandResponse, error) {
  req := client.NewRequest(s.serviceName, "Chat.Command", in)
  rsp := new(CommandResponse)
  err := s.c.Call(ctx, req, rsp, opts...)
  if err != nil {
    return nil, err
  }
  return rsp, nil
}

type ChatHandler interface {
  Command(ctx context.Context, in *CommandRequest, out *CommandResponse) error
}

func RegisterChatHandler(s server.Server, h ChatHandler) {
  hdr := server.NewHandler("Chat", h)
  s.Handle(hdr)
}

